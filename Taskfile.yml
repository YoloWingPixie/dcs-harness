version: '3'

vars:
  TEST_DIR: tests
  BUILD_DIR: dist
  SRC_DIR: src

tasks:
  default:
    desc: Run all tests
    cmds:
      - task: test

  test:
    desc: Run all unit tests
    dir: '{{.TEST_DIR}}'
    cmds:
      - lua test_runner.lua
    sources:
      - '{{.SRC_DIR}}/**/*.lua'
      - '{{.TEST_DIR}}/**/*.lua'

  test:single:
    desc: Run a single test file
    dir: '{{.TEST_DIR}}'
    cmds:
      - lua {{.CLI_ARGS}}
    requires:
      vars: [CLI_ARGS]

  test:watch:
    desc: Watch files and run tests on changes
    watch: true
    sources:
      - '{{.SRC_DIR}}/**/*.lua'
      - '{{.TEST_DIR}}/**/*.lua'
    cmds:
      - task: test

  build:
    desc: Format then build dist/harness.lua (developer build)
    cmds:
      - task: format
      - python build/scripts/build_single_lua_release.py
      - python build/scripts/stamp_harness_version.py
      - python build/scripts/export_harness_selene.py --src src --output dist/harness-selene.yml
    sources:
      - '{{.SRC_DIR}}/**/*.lua'
      - 'build/scripts/build_single_lua_release.py'
      - 'build/scripts/stamp_harness_version.py'
      - '.buildrc'
    generates:
      - 'dist/harness.lua'

  build:cd:
    desc: Build dist/harness.lua without formatting (CI/CD build)
    cmds:
      - python build/scripts/build_single_lua_release.py
      - python build/scripts/stamp_harness_version.py
      - python build/scripts/export_harness_selene.py --src src --output dist/harness-selene.yml
    sources:
      - '{{.SRC_DIR}}/**/*.lua'
      - 'build/scripts/build_single_lua_release.py'
      - 'build/scripts/stamp_harness_version.py'
      - '.buildrc'
    generates:
      - 'dist/harness.lua'

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -f {{.BUILD_DIR}}/*.lua

  lint:
    deps: [build:cd]
    desc: Run linter on source files
    cmds:
      - selene --config selene.toml {{.BUILD_DIR}}/harness.lua

  format:
    desc: Format Lua sources with Stylua (vendored)
    cmds:
      - cmd: ./stylua/stylua src tests test_mission_scripts
        platforms: [linux, darwin]
      - cmd: ./stylua/stylua.exe src tests test_mission_scripts
        platforms: [windows]

  format:check:
    desc: Check formatting with Stylua (vendored)
    cmds:
      - cmd: ./stylua/stylua --check src tests test_mission_scripts
        platforms: [linux, darwin]
      - cmd: ./stylua/stylua.exe --check src tests test_mission_scripts
        platforms: [windows]

  coverage:
    desc: Run tests with coverage reporting
    dir: '{{.TEST_DIR}}'
    cmds:
      - lua -lluacov test_runner.lua
      - luacov
    sources:
      - '{{.SRC_DIR}}/**/*.lua'
      - '{{.TEST_DIR}}/**/*.lua'

  ci:
    desc: Run CI pipeline (format check, lint, test, build without format)
    cmds:
      - task: format:check
      - task: lint
      - task: test
      - task: build:cd

  bump:patch:
    desc: Bump pyproject.toml version (patch)
    cmds:
      - 'python -c "import pathlib,re,sys; p=pathlib.Path(\"pyproject.toml\"); s=p.read_text(encoding=\"utf-8\"); pat=r\"(?m)^version\\s*=\\s*\\\"(\\d+)\\.(\\d+)\\.(\\d+)\\\"\"; m=re.search(pat,s); m or sys.exit(\"version not found\"); a,b,c=map(int,m.groups()); c+=1; new=f\"version = \\\"{a}.{b}.{c}\\\"\"; p.write_text(re.sub(pat,new,s,1), encoding=\"utf-8\"); print(f\"{a}.{b}.{c}\")"'

  bump:minor:
    desc: Bump pyproject.toml version (minor)
    cmds:
      - 'python -c "import pathlib,re,sys; p=pathlib.Path(\"pyproject.toml\"); s=p.read_text(encoding=\"utf-8\"); pat=r\"(?m)^version\\s*=\\s*\\\"(\\d+)\\.(\\d+)\\.(\\d+)\\\"\"; m=re.search(pat,s); m or sys.exit(\"version not found\"); a,b,c=map(int,m.groups()); b+=1; c=0; new=f\"version = \\\"{a}.{b}.{c}\\\"\"; p.write_text(re.sub(pat,new,s,1), encoding=\"utf-8\"); print(f\"{a}.{b}.{c}\")"'

  bump:major:
    desc: Bump pyproject.toml version (major)
    cmds:
      - 'python -c "import pathlib,re,sys; p=pathlib.Path(\"pyproject.toml\"); s=p.read_text(encoding=\"utf-8\"); pat=r\"(?m)^version\\s*=\\s*\\\"(\\d+)\\.(\\d+)\\.(\\d+)\\\"\"; m=re.search(pat,s); m or sys.exit(\"version not found\"); a,b,c=map(int,m.groups()); a+=1; b=0; c=0; new=f\"version = \\\"{a}.{b}.{c}\\\"\"; p.write_text(re.sub(pat,new,s,1), encoding=\"utf-8\"); print(f\"{a}.{b}.{c}\")"'

  help:
    desc: Show available tasks
    cmds:
      - task --list